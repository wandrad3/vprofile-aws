AWSTemplateFormatVersion: "2010-09-09"
Description: Infraestrutura baseada no Vagrant convertida para AWS com DNS, Load Balancer, AuroraDB e ElasticCache

Parameters:
  KeyName:
    Description: Nome da chave SSH
    Type: AWS::EC2::KeyPair::KeyName

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags: [{ Key: Name, Value: MyAppVPC }]

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: PublicSubnet }]

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: PrivateSubnet }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  PrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSG
        - IpProtocol: tcp
          FromPort: 11211
          ToPort: 11211
          SourceSecurityGroupId: !Ref AppSG

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: AppTemplate
      LaunchTemplateData:
        ImageId: ami-0c55b159cbfafe1f0
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds: [!Ref AppSG]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            dnf -y install java-11-openjdk java-11-openjdk-devel
            dnf install git maven wget -y

            TOMURL="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.75/bin/apache-tomcat-9.0.75.tar.gz"
            cd /tmp/
            wget $TOMURL -O tomcatbin.tar.gz
            EXTOUT=`tar xzvf tomcatbin.tar.gz`
            TOMDIR=`echo $EXTOUT | cut -d '/' -f1`
            useradd --shell /sbin/nologin tomcat
            rsync -avzh /tmp/$TOMDIR/ /usr/local/tomcat/
            chown -R tomcat.tomcat /usr/local/tomcat

            cat <<EOT >> /etc/systemd/system/tomcat.service
            [Unit]
            Description=Tomcat
            After=network.target

            [Service]
            User=tomcat
            Group=tomcat
            WorkingDirectory=/usr/local/tomcat
            Environment=JAVA_HOME=/usr/lib/jvm/jre
            Environment=CATALINA_HOME=/usr/local/tomcat
            ExecStart=/usr/local/tomcat/bin/catalina.sh run
            ExecStop=/usr/local/tomcat/bin/shutdown.sh
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOT

            systemctl daemon-reload
            systemctl start tomcat
            systemctl enable tomcat

            git clone -b main https://github.com/devopshydclub/vprofile-project.git
            cd vprofile-project
            mvn install
            systemctl stop tomcat
            sleep 20
            rm -rf /usr/local/tomcat/webapps/ROOT*
            cp target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war

            cat <<EOT >> /usr/local/tomcat/webapps/ROOT/WEB-INF/classes/application.properties
            jdbc.driverClassName=com.mysql.jdbc.Driver
            jdbc.url=jdbc:mysql://${AuroraCluster.Endpoint.Address}:3306/accounts?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
            jdbc.username=admin
            jdbc.password=admin123

            memcached.active.host=${ElasticCacheCluster.ConfigurationEndpoint.Address}
            memcached.active.port=11211
            # Comentado ou removido, at√© que tenha outro host:
            # memcached.standBy.host=127.0.0.2
            # memcached.standBy.port=11211

            # Corrigir isso, quando tiver um cluster Elasticsearch real:
            elasticsearch.host=opensearch-cluster-endpoint
            elasticsearch.port=9300
            elasticsearch.cluster=vprofile
            elasticsearch.node=vprofilenode

            EOT

            systemctl start tomcat
            systemctl restart tomcat
            systemctl stop firewalld
            systemctl disable firewalld

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /

  AppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: app-alb
      Subnets: [!Ref PublicSubnet]
      SecurityGroups: [!Ref AppSG]

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnet]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "3"
      TargetGroupARNs: [!Ref AppTargetGroup]

  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: aurora-db-cluster
      MasterUsername: admin
      MasterUserPassword: admin1234
      VpcSecurityGroupIds: [!Ref PrivateSG]
      DBSubnetGroupName: !Ref DBSubnetGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for Aurora
      SubnetIds: [!Ref PrivateSubnet]

  ElasticCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t2.micro
      Engine: memcached
      NumCacheNodes: 1
      VpcSecurityGroupIds: [!Ref PrivateSG]
      CacheSubnetGroupName: !Ref CacheSubnetGroup

  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Cache Subnet Group
      SubnetIds: [!Ref PrivateSubnet]